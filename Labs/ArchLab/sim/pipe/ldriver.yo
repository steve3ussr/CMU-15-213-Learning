                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f69804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	# irmovq $0,%rax		# res = 0;
0x032: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x034: 764600000000000000   | 	jg Loop		# if not so, goto Loop
0x03d: 708002000000000000   | 	jmp Done    # if len<=0, goto Done
                            | 
0x046:                      | Loop:	
0x046: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x050: 50b70800000000000000 |     mrmovq 8(%rdi), %r11	# read val from src...
0x05a: 50c71000000000000000 |     mrmovq 16(%rdi), %r12	# read val from src...
0x064: 50d71800000000000000 |     mrmovq 24(%rdi), %r13	# read val from src...
0x06e: 50e72000000000000000 |     mrmovq 32(%rdi), %r14	# read val from src...
0x078: 50172800000000000000 |     mrmovq 40(%rdi), %rcx	# read val from src...
0x082: 50373000000000000000 |     mrmovq 48(%rdi), %rbx	# read val from src...
0x08c: 50973800000000000000 |     mrmovq 56(%rdi), %r9	# read val from src...
0x096: 50574000000000000000 |     mrmovq 64(%rdi), %rbp 	# read val from src...
                            | 
0x0a0: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0aa: 62aa                 | 	andq %r10, %r10		# val1 <= 0?
0x0ac: 71bf00000000000000   | 	jle L1		# if so, goto L1:
0x0b5: c0f00100000000000000 | 	iaddq $1, %rax		# res++
0x0bf:                      | L1: 
0x0bf: c0f2ffffffffffffffff |     iaddq $-1, %rdx		# len--
0x0c9: 74d300000000000000   |     jne K2  # len>0, continue
0x0d2: 90                   |     ret
0x0d3:                      | K2:
0x0d3: 40b60800000000000000 |     rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x0dd: 62bb                 |     andq %r11, %r11		# val2 <= 0?
0x0df: 71f200000000000000   |     jle L2		# if so, goto L2:
0x0e8: c0f00100000000000000 |     iaddq $1, %rax		# res++
0x0f2:                      | L2:
0x0f2: c0f2ffffffffffffffff |     iaddq $-1, %rdx		# len--
0x0fc: 740601000000000000   |     jne K3  # len>0, continue
0x105: 90                   |     ret
0x106:                      | K3:
0x106: 40c61000000000000000 |     rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x110: 62cc                 |     andq %r12, %r12		# val3 <= 0?
0x112: 712501000000000000   |     jle L3		# if so, goto L3:
0x11b: c0f00100000000000000 |     iaddq $1, %rax		# res++
0x125:                      | L3:
0x125: c0f2ffffffffffffffff |     iaddq $-1, %rdx		# len--
0x12f: 743901000000000000   |     jne K4  # len>0, continue
0x138: 90                   |     ret
0x139:                      | K4:
0x139: 40d61800000000000000 |     rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x143: 62dd                 |     andq %r13, %r13		# val4 <= 0?
0x145: 715801000000000000   |     jle L4		# if so, goto L4:
0x14e: c0f00100000000000000 |     iaddq $1, %rax		# res++
0x158:                      | L4:
0x158: c0f2ffffffffffffffff |     iaddq $-1, %rdx		# len--
0x162: 746c01000000000000   |     jne K5  # len>0, continue
0x16b: 90                   |     ret
                            | 
0x16c:                      | K5:
0x16c: 40e62000000000000000 |     rmmovq %r14, 32(%rsi)	# ...and store it to dst
0x176: 62ee                 |     andq %r14, %r14		# val5 <= 0?
0x178: 718b01000000000000   |     jle L5		# if so, goto L5:
0x181: c0f00100000000000000 |     iaddq $1, %rax		# res++
0x18b:                      | L5:
0x18b: c0f2ffffffffffffffff |     iaddq $-1, %rdx		# len--
0x195: 749f01000000000000   |     jne K6  # len>0, continue
0x19e: 90                   |     ret
                            | 
0x19f:                      | K6:
0x19f: 40162800000000000000 |     rmmovq %rcx, 40(%rsi)	# ...and store it to dst
0x1a9: 6211                 |     andq %rcx, %rcx		# val3 <= 0?
0x1ab: 71be01000000000000   |     jle L6		# if so, goto L3:
0x1b4: c0f00100000000000000 |     iaddq $1, %rax		# res++
0x1be:                      | L6:
0x1be: c0f2ffffffffffffffff |     iaddq $-1, %rdx		# len--
0x1c8: 74d201000000000000   |     jne K7  # len>0, continue
0x1d1: 90                   |     ret
                            | 
0x1d2:                      | K7:
0x1d2: 40363000000000000000 |     rmmovq %rbx, 48(%rsi)	# ...and store it to dst
0x1dc: 6233                 |     andq %rbx, %rbx  	# val3 <= 0?
0x1de: 71f101000000000000   |     jle L7		# if so, goto L3:
0x1e7: c0f00100000000000000 |     iaddq $1, %rax		# res++
0x1f1:                      | L7:
0x1f1: c0f2ffffffffffffffff |     iaddq $-1, %rdx		# len--
0x1fb: 740502000000000000   |     jne K8  # len>0, continue
0x204: 90                   |     ret
                            | 
0x205:                      | K8:
0x205: 40963800000000000000 |     rmmovq %r9, 56(%rsi)	# ...and store it to dst
0x20f: 6299                 |     andq %r9, %r9  	# val3 <= 0?
0x211: 712402000000000000   |     jle L8		# if so, goto L3:
0x21a: c0f00100000000000000 |     iaddq $1, %rax		# res++
0x224:                      | L8:
0x224: c0f2ffffffffffffffff |     iaddq $-1, %rdx		# len--
0x22e: 743802000000000000   |     jne K9  # len>0, continue
0x237: 90                   |     ret
                            | 
0x238:                      | K9:
0x238: 40564000000000000000 |     rmmovq %rbp, 64(%rsi)	# ...and store it to dst
0x242: c0f2ffffffffffffffff |     iaddq $-1, %rdx		# len--
0x24c: c0f74800000000000000 |     iaddq $72, %rdi		# src++
0x256: c0f64800000000000000 |     iaddq $72, %rsi		# dst++
0x260: 6255                 |     andq %rbp, %rbp		# val8 <= 0?
0x262: 717502000000000000   |     jle FINAL
0x26b: c0f00100000000000000 |     iaddq $1, %rax		# res++
0x275:                      | FINAL:
0x275: 6222                 |     andq %rdx,%rdx		# len > 0?
0x277: 764600000000000000   | 	jg Loop			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x280:                      | Done:
0x280: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x281:                      | End:
                            | #/* $end ncopy-ys */
0x281:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x288:                      | 	.align 8
0x288:                      | src:
0x288: 0100000000000000     | 	.quad 1
0x290: feffffffffffffff     | 	.quad -2
0x298: 0300000000000000     | 	.quad 3
0x2a0: fcffffffffffffff     | 	.quad -4
0x2a8: fbffffffffffffff     | 	.quad -5
0x2b0: faffffffffffffff     | 	.quad -6
0x2b8: 0700000000000000     | 	.quad 7
0x2c0: f8ffffffffffffff     | 	.quad -8
0x2c8: 0900000000000000     | 	.quad 9
0x2d0: f6ffffffffffffff     | 	.quad -10
0x2d8: f5ffffffffffffff     | 	.quad -11
0x2e0: f4ffffffffffffff     | 	.quad -12
0x2e8: f3ffffffffffffff     | 	.quad -13
0x2f0: 0e00000000000000     | 	.quad 14
0x2f8: f1ffffffffffffff     | 	.quad -15
0x300: 1000000000000000     | 	.quad 16
0x308: 1100000000000000     | 	.quad 17
0x310: eeffffffffffffff     | 	.quad -18
0x318: 1300000000000000     | 	.quad 19
0x320: 1400000000000000     | 	.quad 20
0x328: ebffffffffffffff     | 	.quad -21
0x330: eaffffffffffffff     | 	.quad -22
0x338: 1700000000000000     | 	.quad 23
0x340: 1800000000000000     | 	.quad 24
0x348: 1900000000000000     | 	.quad 25
0x350: 1a00000000000000     | 	.quad 26
0x358: 1b00000000000000     | 	.quad 27
0x360: e4ffffffffffffff     | 	.quad -28
0x368: e3ffffffffffffff     | 	.quad -29
0x370: e2ffffffffffffff     | 	.quad -30
0x378: e1ffffffffffffff     | 	.quad -31
0x380: 2000000000000000     | 	.quad 32
0x388: 2100000000000000     | 	.quad 33
0x390: 2200000000000000     | 	.quad 34
0x398: ddffffffffffffff     | 	.quad -35
0x3a0: dcffffffffffffff     | 	.quad -36
0x3a8: dbffffffffffffff     | 	.quad -37
0x3b0: 2600000000000000     | 	.quad 38
0x3b8: 2700000000000000     | 	.quad 39
0x3c0: d8ffffffffffffff     | 	.quad -40
0x3c8: d7ffffffffffffff     | 	.quad -41
0x3d0: d6ffffffffffffff     | 	.quad -42
0x3d8: 2b00000000000000     | 	.quad 43
0x3e0: 2c00000000000000     | 	.quad 44
0x3e8: d3ffffffffffffff     | 	.quad -45
0x3f0: d2ffffffffffffff     | 	.quad -46
0x3f8: d1ffffffffffffff     | 	.quad -47
0x400: 3000000000000000     | 	.quad 48
0x408: 3100000000000000     | 	.quad 49
0x410: ceffffffffffffff     | 	.quad -50
0x418: cdffffffffffffff     | 	.quad -51
0x420: ccffffffffffffff     | 	.quad -52
0x428: cbffffffffffffff     | 	.quad -53
0x430: 3600000000000000     | 	.quad 54
0x438: c9ffffffffffffff     | 	.quad -55
0x440: 3800000000000000     | 	.quad 56
0x448: 3900000000000000     | 	.quad 57
0x450: c6ffffffffffffff     | 	.quad -58
0x458: 3b00000000000000     | 	.quad 59
0x460: 3c00000000000000     | 	.quad 60
0x468: 3d00000000000000     | 	.quad 61
0x470: 3e00000000000000     | 	.quad 62
0x478: 3f00000000000000     | 	.quad 63
0x480: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x490:                      | 	.align 16
0x490:                      | Predest:
0x490: fadebc0000000000     | 	.quad 0xbcdefa
0x498:                      | dest:
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690:                      | Postdest:
0x690: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x698:                      | .align 8
                            | # Run time stack
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
0x6a8: 0000000000000000     | 	.quad 0
0x6b0: 0000000000000000     | 	.quad 0
0x6b8: 0000000000000000     | 	.quad 0
0x6c0: 0000000000000000     | 	.quad 0
0x6c8: 0000000000000000     | 	.quad 0
0x6d0: 0000000000000000     | 	.quad 0
0x6d8: 0000000000000000     | 	.quad 0
0x6e0: 0000000000000000     | 	.quad 0
0x6e8: 0000000000000000     | 	.quad 0
0x6f0: 0000000000000000     | 	.quad 0
0x6f8: 0000000000000000     | 	.quad 0
0x700: 0000000000000000     | 	.quad 0
0x708: 0000000000000000     | 	.quad 0
0x710: 0000000000000000     | 	.quad 0
                            | 
0x718:                      | Stack:
