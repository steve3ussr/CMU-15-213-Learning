                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f66805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
                            | 
0x032:                      | Expand:
0x032: 2025                 | rrmovq %rdx, %rbp   # rbp=len
0x034: c0f5f8ffffffffffffff | iaddq $-8, %rbp
0x03e: 72b601000000000000   |         jl RemainHandle  # len<8, goto remain
                            | 
0x047: 50970000000000000000 | mrmovq (%rdi), %r9
0x051: 50a70800000000000000 |         mrmovq 8(%rdi), %r10
0x05b: 50b71000000000000000 |         mrmovq 16(%rdi), %r11
0x065: 50c71800000000000000 |         mrmovq 24(%rdi), %r12
0x06f: 50d72000000000000000 |         mrmovq 32(%rdi), %r13
0x079: 50e72800000000000000 |         mrmovq 40(%rdi), %r14
0x083: 50373000000000000000 |         mrmovq 48(%rdi), %rbx
0x08d: 50173800000000000000 |         mrmovq 56(%rdi), %rcx
                            | 
0x097: 40960000000000000000 |         rmmovq %r9, (%rsi)
0x0a1: 40a60800000000000000 | rmmovq %r10, 8(%rsi)
0x0ab: 40b61000000000000000 | rmmovq %r11, 16(%rsi)
0x0b5: 40c61800000000000000 | rmmovq %r12, 24(%rsi)
0x0bf: 40d62000000000000000 | rmmovq %r13, 32(%rsi)
0x0c9: 40e62800000000000000 | rmmovq %r14, 40(%rsi)
0x0d3: 40363000000000000000 | rmmovq %rbx, 48(%rsi)
0x0dd: 40163800000000000000 | rmmovq %rcx, 56(%rsi)
                            | 
0x0e7: 6299                 | andq %r9, %r9
0x0e9: 71fc00000000000000   |         jle ExpTest2
0x0f2: c0f00100000000000000 |         iaddq $1, %rax
0x0fc:                      |         ExpTest2:
0x0fc: 62aa                 | andq %r10, %r10
0x0fe: 711101000000000000   |         jle ExpTest3
0x107: c0f00100000000000000 |         iaddq $1, %rax
0x111:                      |         ExpTest3:
0x111: 62bb                 | andq %r11, %r11
0x113: 712601000000000000   |         jle ExpTest4
0x11c: c0f00100000000000000 |         iaddq $1, %rax
0x126:                      |         ExpTest4:
0x126: 62cc                 | andq %r12, %r12
0x128: 713b01000000000000   |         jle ExpTest5
0x131: c0f00100000000000000 |         iaddq $1, %rax
0x13b:                      |         ExpTest5:
0x13b: 62dd                 | andq %r13, %r13
0x13d: 715001000000000000   |         jle ExpTest6
0x146: c0f00100000000000000 |         iaddq $1, %rax
0x150:                      |         ExpTest6:
0x150: 62ee                 | andq %r14, %r14
0x152: 716501000000000000   |         jle ExpTest7
0x15b: c0f00100000000000000 |         iaddq $1, %rax
0x165:                      |         ExpTest7:
0x165: 6233                 | andq %rbx, %rbx
0x167: 717a01000000000000   |         jle ExpTest8
0x170: c0f00100000000000000 |         iaddq $1, %rax
0x17a:                      |         ExpTest8:
0x17a: 6211                 | andq %rcx, %rcx
0x17c: 718f01000000000000   |         jle ExpTestLen
0x185: c0f00100000000000000 |         iaddq $1, %rax
                            | 
0x18f:                      |         ExpTestLen:
0x18f: c0f74000000000000000 | iaddq $64, %rdi
0x199: c0f64000000000000000 |         iaddq $64, %rsi
0x1a3: c0f2f8ffffffffffffff |         iaddq $-8, %rdx
0x1ad: 753200000000000000   |         jge Expand
                            | 
0x1b6:                      |         RemainHandle:
0x1b6: 6222                 | andq %rdx, %rdx
0x1b8: 715803000000000000   |         jle Done
                            | 
0x1c1: 50a70000000000000000 | mrmovq (%rdi), %r10	    # read val from src...
0x1cb: 50b70800000000000000 | mrmovq 8(%rdi), %r11	# read val from src...
0x1d5: 50c71000000000000000 | mrmovq 16(%rdi), %r12	# read val from src...
0x1df: 50d71800000000000000 | mrmovq 24(%rdi), %r13	# read val from src...
0x1e9: 50e72000000000000000 | mrmovq 32(%rdi), %r14	# read val from src...
0x1f3: 50372800000000000000 | mrmovq 40(%rdi), %rbx	# read val from src...
0x1fd: 50173000000000000000 | mrmovq 48(%rdi), %rcx	# read val from src...
                            | 
0x207:                      | R1:
0x207: 40a60000000000000000 | rmmovq %r10, (%rsi)
0x211: 62aa                 | andq %r10, %r10
0x213: 712602000000000000   |         jle R1test
0x21c: c0f00100000000000000 |         iaddq $1, %rax  # res++
0x226:                      | R1test:
0x226: c0f2ffffffffffffffff | iaddq $-1, %rdx # len--
0x230: 743a02000000000000   | jne R2
0x239: 90                   | ret
                            | 
0x23a:                      |         R2:
0x23a: 40b60800000000000000 | rmmovq %r11, 8(%rsi)
0x244: 62bb                 | andq %r11, %r11
0x246: 715902000000000000   |         jle R2test
0x24f: c0f00100000000000000 |         iaddq $1, %rax  # res++
0x259:                      | R2test:
0x259: c0f2ffffffffffffffff | iaddq $-1, %rdx # len--
0x263: 746d02000000000000   | jne R3
0x26c: 90                   | ret
                            | 
0x26d:                      |         R3:
0x26d: 40c61000000000000000 | rmmovq %r12, 16(%rsi)
0x277: 62cc                 | andq %r12, %r12
0x279: 718c02000000000000   |         jle R3test
0x282: c0f00100000000000000 |         iaddq $1, %rax  # res++
0x28c:                      | R3test:
0x28c: c0f2ffffffffffffffff | iaddq $-1, %rdx # len--
0x296: 74a002000000000000   | jne R4
0x29f: 90                   | ret
                            | 
0x2a0:                      |         R4:
0x2a0: 40d61800000000000000 | rmmovq %r13, 24(%rsi)
0x2aa: 62dd                 | andq %r13, %r13
0x2ac: 71bf02000000000000   |         jle R4test
0x2b5: c0f00100000000000000 |         iaddq $1, %rax  # res++
0x2bf:                      | R4test:
0x2bf: c0f2ffffffffffffffff | iaddq $-1, %rdx # len--
0x2c9: 74d302000000000000   | jne R5
0x2d2: 90                   | ret
                            | 
0x2d3:                      |         R5:
0x2d3: 40e62000000000000000 | rmmovq %r14, 32(%rsi)
0x2dd: 62ee                 | andq %r14, %r14
0x2df: 71f202000000000000   |         jle R5test
0x2e8: c0f00100000000000000 |         iaddq $1, %rax  # res++
0x2f2:                      | R5test:
0x2f2: c0f2ffffffffffffffff | iaddq $-1, %rdx # len--
0x2fc: 740603000000000000   | jne R6
0x305: 90                   | ret
                            | 
0x306:                      |         R6:
0x306: 40362800000000000000 | rmmovq %rbx, 40(%rsi)
0x310: 6233                 | andq %rbx, %rbx
0x312: 712503000000000000   |         jle R6test
0x31b: c0f00100000000000000 |         iaddq $1, %rax  # res++
0x325:                      | R6test:
0x325: c0f2ffffffffffffffff | iaddq $-1, %rdx # len--
0x32f: 743903000000000000   | jne R7
0x338: 90                   | ret
                            | 
0x339:                      |         R7:
0x339: 40163000000000000000 | rmmovq %rcx, 48(%rsi)
0x343: 6211                 | andq %rcx, %rcx
0x345: 715803000000000000   |         jle Done
0x34e: c0f00100000000000000 |         iaddq $1, %rax  # res++
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x358:                      | Done:
0x358: 90                   | ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x359:                      | End:
                            | #/* $end ncopy-ys */
0x359:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x360:                      | 	.align 8
0x360:                      | src:
0x360: 0100000000000000     | 	.quad 1
0x368: 0200000000000000     | 	.quad 2
0x370: fdffffffffffffff     | 	.quad -3
0x378: fcffffffffffffff     | 	.quad -4
0x380: fbffffffffffffff     | 	.quad -5
0x388: 0600000000000000     | 	.quad 6
0x390: f9ffffffffffffff     | 	.quad -7
0x398: f8ffffffffffffff     | 	.quad -8
0x3a0: f7ffffffffffffff     | 	.quad -9
0x3a8: f6ffffffffffffff     | 	.quad -10
0x3b0: f5ffffffffffffff     | 	.quad -11
0x3b8: 0c00000000000000     | 	.quad 12
0x3c0: 0d00000000000000     | 	.quad 13
0x3c8: f2ffffffffffffff     | 	.quad -14
0x3d0: f1ffffffffffffff     | 	.quad -15
0x3d8: f0ffffffffffffff     | 	.quad -16
0x3e0: 1100000000000000     | 	.quad 17
0x3e8: eeffffffffffffff     | 	.quad -18
0x3f0: edffffffffffffff     | 	.quad -19
0x3f8: 1400000000000000     | 	.quad 20
0x400: ebffffffffffffff     | 	.quad -21
0x408: eaffffffffffffff     | 	.quad -22
0x410: 1700000000000000     | 	.quad 23
0x418: 1800000000000000     | 	.quad 24
0x420: e7ffffffffffffff     | 	.quad -25
0x428: 1a00000000000000     | 	.quad 26
0x430: e5ffffffffffffff     | 	.quad -27
0x438: e4ffffffffffffff     | 	.quad -28
0x440: e3ffffffffffffff     | 	.quad -29
0x448: 1e00000000000000     | 	.quad 30
0x450: e1ffffffffffffff     | 	.quad -31
0x458: 2000000000000000     | 	.quad 32
0x460: 2100000000000000     | 	.quad 33
0x468: deffffffffffffff     | 	.quad -34
0x470: ddffffffffffffff     | 	.quad -35
0x478: dcffffffffffffff     | 	.quad -36
0x480: dbffffffffffffff     | 	.quad -37
0x488: daffffffffffffff     | 	.quad -38
0x490: 2700000000000000     | 	.quad 39
0x498: d8ffffffffffffff     | 	.quad -40
0x4a0: 2900000000000000     | 	.quad 41
0x4a8: 2a00000000000000     | 	.quad 42
0x4b0: d5ffffffffffffff     | 	.quad -43
0x4b8: d4ffffffffffffff     | 	.quad -44
0x4c0: d3ffffffffffffff     | 	.quad -45
0x4c8: d2ffffffffffffff     | 	.quad -46
0x4d0: 2f00000000000000     | 	.quad 47
0x4d8: 3000000000000000     | 	.quad 48
0x4e0: 3100000000000000     | 	.quad 49
0x4e8: ceffffffffffffff     | 	.quad -50
0x4f0: cdffffffffffffff     | 	.quad -51
0x4f8: 3400000000000000     | 	.quad 52
0x500: 3500000000000000     | 	.quad 53
0x508: 3600000000000000     | 	.quad 54
0x510: 3700000000000000     | 	.quad 55
0x518: 3800000000000000     | 	.quad 56
0x520: 3900000000000000     | 	.quad 57
0x528: 3a00000000000000     | 	.quad 58
0x530: 3b00000000000000     | 	.quad 59
0x538: 3c00000000000000     | 	.quad 60
0x540: 3d00000000000000     | 	.quad 61
0x548: 3e00000000000000     | 	.quad 62
0x550: 3f00000000000000     | 	.quad 63
0x558: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x560:                      | 	.align 16
0x560:                      | Predest:
0x560: fadebc0000000000     | 	.quad 0xbcdefa
0x568:                      | dest:
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760:                      | Postdest:
0x760: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x768:                      | .align 8
                            | # Run time stack
0x768: 0000000000000000     | 	.quad 0
0x770: 0000000000000000     | 	.quad 0
0x778: 0000000000000000     | 	.quad 0
0x780: 0000000000000000     | 	.quad 0
0x788: 0000000000000000     | 	.quad 0
0x790: 0000000000000000     | 	.quad 0
0x798: 0000000000000000     | 	.quad 0
0x7a0: 0000000000000000     | 	.quad 0
0x7a8: 0000000000000000     | 	.quad 0
0x7b0: 0000000000000000     | 	.quad 0
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
                            | 
0x7e8:                      | Stack:
